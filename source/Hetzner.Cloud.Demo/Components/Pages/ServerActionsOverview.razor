@page "/servers/actions"
@rendermode InteractiveServer

@attribute [StreamRendering]

@using Hetzner.Cloud.Interfaces
@using Hetzner.Cloud.Models
@using Hetzner.Cloud.Pagination
@using Hetzner.Cloud.Filter
@using Hetzner.Cloud.Sorting

@inject IServerActionsService ServerActionsService

<PageTitle>Servers-Actions</PageTitle>

@code {
    private bool _loading = false;
    private List<ServerAction> _serverActions { get; set; } = new();
    private string _error = string.Empty;
    private string _errorDetails = string.Empty;
    private List<IFilter> _filters = new();
    private int _page = 1;
    private int _itemsPerPage = 10;
    private long? _idFilter = null;
    private ServerActionStatus? _statusFilter = null;
    private Sorting<ServerActionSorting>? _sorting = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        _serverActions.Clear();
        _error = string.Empty;
        _errorDetails = string.Empty;

        try
        {
            _loading = true;

            PagedResponse<ServerAction> items = await ServerActionsService.GetAllAsync(_page,
                _itemsPerPage,
                _filters,
                _sorting);

            foreach (var item in items.Items)
            {
                this._serverActions.Add(item);
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            _errorDetails = ex.StackTrace;
        }
        finally
        {
            _loading = false;
        }
    }

    public async Task OnSearch()
    {
        _filters.Clear();

        if (_idFilter is not null)
        {
            _filters.Add(new IdFilter(_idFilter.Value));
        }

        if (_statusFilter is not null)
        {
            _filters.Add(new StatusFilter<ServerActionStatus>(_statusFilter.Value));
        }

        await LoadAsync();
    }

    public async Task OnClearFilter()
    {
        _idFilter = null;
        _statusFilter = null;

        await OnSearch();
    }

    public async Task OnSelectStatus(ServerActionStatus status)
    {
        _statusFilter = status;
        await OnSearch();
    }

    public async Task OnSelectSorting(Sorting<ServerActionSorting> sorting)
    {
        _sorting = sorting;
        await OnSearch();
    }

}

@if (!string.IsNullOrEmpty(_error))
{
    <div class="row">

        <div class="col-md-12">

            <div class="alert alert-danger" role="alert">
                @_error
                <br/>
                <hr/>
                <br/>
                <code>@_errorDetails</code>
            </div>

        </div>

    </div>
}

<div class="row">

    <div class="col-md-12">

        <div class="mb-3">
            <label for="ServerActionOverviewSearchIdField"
                   class="form-label">
                Server Action Id
            </label>
            <input type="number"
                   class="form-control"
                   id="ServerActionOverviewSearchIdField"
                   placeholder="filter by server action id"
                   @bind="_idFilter">
        </div>

        <div class="mb-3">
            <div class="dropdown">
                <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Server Action Status
                    @if (_statusFilter is not null)
                    {
                        <span>: @_statusFilter</span>
                    }
                </button>
                <ul class="dropdown-menu">
                    @foreach(var status in Enum.GetValues(typeof(ServerActionStatus)))
                    {
                        <li><a class="dropdown-item" @onclick="(() => OnSelectStatus((ServerActionStatus)status))">@status</a></li>
                    }
                </ul>
            </div>
        </div>

        <div class="mb-3">
            <div class="dropdown">
                <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Sort
                    @if (_sorting is not null)
                    {
                        <span>: @_sorting.Field @_sorting.Direction</span>
                    }
                </button>
                <ul class="dropdown-menu">
                    @foreach(var sorting in Enum.GetValues(typeof(ServerActionSorting)))
                    {
                        @foreach(var direction in Enum.GetValues(typeof(ServerActionSorting)))
                        {
                            <li><a class="dropdown-item" @onclick="(() => OnSelectSorting(new((ServerActionSorting)sorting, (SortingDirection)direction)))">@sorting @direction</a></li>
                        }
                    }
                </ul>
            </div>
        </div>

        <div class="mb-3">
            <button class="btn btn-primary me-3"
                    @onclick="OnSearch">
                <span>Search</span>
                <i class="fa-solid fa-magnifying-glass"></i>
            </button>

            <button class="btn btn-secondary me-3"
                    @onclick="OnClearFilter">
                <span>Clear</span>
                <i class="fa-solid fa-xmark"></i>
            </button>
        </div>

    </div>

</div>

<div class="row">

    <div class="col-md-12">

        <h1>Servers</h1>

        <table class="table">

            <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Command</th>
                <th scope="col">Progress</th>
                <th scope="col">Started</th>
            </tr>
            </thead>

            <tbody>

            @if (!_loading)
            {
                @if (!_serverActions.Any())
                {
                    <tr>
                        <th scope="row" colspan="6">no server-actions found</th>
                    </tr>
                }

                @foreach (var serverAction in _serverActions)
                {
                    <tr>
                        <th scope="row">@serverAction.Id</th>
                        <td>@serverAction.Command</td>
                        <td>@serverAction.Progress</td>
                        <td>@serverAction.Started.ToShortDateString() @serverAction.Started.ToShortTimeString()</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <th scope="row" colspan="6">loading...</th>
                </tr>
            }
            </tbody>

        </table>

    </div>

</div>