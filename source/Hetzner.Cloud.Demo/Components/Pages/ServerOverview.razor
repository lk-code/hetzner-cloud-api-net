@page "/servers"
@rendermode InteractiveServer

@attribute [StreamRendering]

@using Hetzner.Cloud.Interfaces
@using Hetzner.Cloud.Models
@using Hetzner.Cloud.Pagination
@using Hetzner.Cloud.Filter
@using Hetzner.Cloud.Sorting

@inject IServerService ServerService

<PageTitle>Servers</PageTitle>

@code {
    private bool _loading = false;
    private List<Server> _servers { get; set; } = new();
    private string _error = string.Empty;
    private string _errorDetails = string.Empty;
    private List<IFilter> _filters = new();
    private int _page = 1;
    private int _itemsPerPage = 10;
    private string _nameFilter = string.Empty;
    private string _labelFilter = string.Empty;
    private ServerStatus? _statusFilter = null;
    private Sorting<ServerSorting>? _sorting = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadServersAsync();
    }

    private async Task LoadServersAsync()
    {
        _servers.Clear();
        _error = string.Empty;
        _errorDetails = string.Empty;

        try
        {
            _loading = true;

            PagedResponse<Server> servers = await ServerService.GetAllAsync(_page,
                _itemsPerPage,
                _filters,
                _sorting);

            foreach (var server in servers.Items)
            {
                this._servers.Add(server);
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            _errorDetails = ex.StackTrace;
        }
        finally
        {
            _loading = false;
        }
    }

    public async Task OnSearch()
    {
        _filters.Clear();

        if (!string.IsNullOrEmpty(_nameFilter))
        {
            _filters.Add(new NameFilter(_nameFilter));
        }

        if (!string.IsNullOrEmpty(_labelFilter))
        {
            _filters.Add(new LabelFilter(_labelFilter));
        }

        if (_statusFilter is not null)
        {
            _filters.Add(new StatusFilter(_statusFilter.Value));
        }

        await LoadServersAsync();
    }

    public async Task OnClearFilter()
    {
        _nameFilter = string.Empty;
        _labelFilter = string.Empty;
        _statusFilter = null;

        await OnSearch();
    }

    public async Task OnSelectStatus(ServerStatus status)
    {
        _statusFilter = status;
        await OnSearch();
    }

    public async Task OnSelectSorting(Sorting<ServerSorting> sorting)
    {
        _sorting = sorting;
        await OnSearch();
    }

}

@if (!string.IsNullOrEmpty(_error))
{
    <div class="row">

        <div class="col-md-12">

            <div class="alert alert-danger" role="alert">
                @_error
                <br/>
                <hr/>
                <br/>
                <code>@_errorDetails</code>
            </div>

        </div>

    </div>
}

<div class="row">

    <div class="col-md-12">

        <div class="mb-3">
            <label for="ServerOverviewSearchNameField"
                   class="form-label">
                Server Name
            </label>
            <input type="search"
                   class="form-control"
                   id="ServerOverviewSearchNameField"
                   placeholder="search by server name"
                   @bind="_nameFilter">
        </div>

        <div class="mb-3">
            <label for="ServerOverviewSearchLabelField"
                   class="form-label">
                Server Label
            </label>
            <input type="search"
                   class="form-control"
                   id="ServerOverviewSearchLabelField"
                   placeholder="search by server label"
                   @bind="_labelFilter">
        </div>

        <div class="mb-3">
            <div class="dropdown">
                <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Server Status
                    @if (_statusFilter is not null)
                    {
                        <span>: @_statusFilter</span>
                    }
                </button>
                <ul class="dropdown-menu">
                    @foreach(var status in Enum.GetValues(typeof(ServerStatus)))
                    {
                        <li><a class="dropdown-item" @onclick="(() => OnSelectStatus((ServerStatus)status))">@status</a></li>
                    }
                </ul>
            </div>
        </div>

        <div class="mb-3">
            <div class="dropdown">
                <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Sort
                    @if (_sorting is not null)
                    {
                        <span>: @_sorting.Field @_sorting.Direction</span>
                    }
                </button>
                <ul class="dropdown-menu">
                    @foreach(var sorting in Enum.GetValues(typeof(ServerSorting)))
                    {
                        @foreach(var direction in Enum.GetValues(typeof(SortingDirection)))
                        {
                            <li><a class="dropdown-item" @onclick="(() => OnSelectSorting(new((ServerSorting)sorting, (SortingDirection)direction)))">@sorting @direction</a></li>
                        }
                    }
                </ul>
            </div>
        </div>

        <div class="mb-3">
            <button class="btn btn-primary me-3"
                    @onclick="OnSearch">
                <span>Search</span>
                <i class="fa-solid fa-magnifying-glass"></i>
            </button>

            <button class="btn btn-secondary me-3"
                    @onclick="OnClearFilter">
                <span>Clear</span>
                <i class="fa-solid fa-xmark"></i>
            </button>
        </div>

    </div>

</div>

<div class="row">

    <div class="col-md-12">

        <h1>Servers</h1>

        <table class="table">

            <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">Status</th>
                <th scope="col">Created</th>
                <th scope="col">Locked</th>
                <th scope="col">Actions</th>
            </tr>
            </thead>

            <tbody>

            @if (!_loading)
            {
                @if (!_servers.Any())
                {
                    <tr>
                        <th scope="row" colspan="6">no servers found</th>
                    </tr>
                }

                @foreach (var server in _servers)
                {
                    <tr>
                        <th scope="row">@server.Id</th>
                        <td>@server.Name</td>
                        <td>@server.Status</td>
                        <td>@server.Created.ToShortDateString() @server.Created.ToShortTimeString()</td>
                        <td>
                            @if (@server.Locked)
                            {
                                <button type="button" disabled class="btn btn-sm btn-secondary">
                                    <i class="bi bi-lock"></i>
                                </button>
                            }
                            else
                            {
                                <button type="button" disabled class="btn btn-sm btn-secondary">
                                    <i class="bi bi-unlock"></i>
                                </button>
                            }
                        </td>
                        <td>

                            <div class="btn-group" role="group" aria-label="Server Actions">
                                <a class="btn btn-sm btn-primary" href="servers/@server.Id">Open</a>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="6">
                            @foreach (var label in server.Labels)
                            {
                                <span class="badge bg-primary me-2">@label.Key / @label.Value</span>
                            }
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <th scope="row" colspan="6">loading...</th>
                </tr>
            }
            </tbody>

        </table>

    </div>

</div>